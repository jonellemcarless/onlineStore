{"ast":null,"code":"import _toConsumableArray from \"/Users/jonellecarless/gwu/starting points/storetest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n// Code for cart function\nvar cartReducer = function cartReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      // \"...\" is the spread operator which takes the old array and adds everything to a new array. So in this case everything from state gets put into an array.\n      // action.payload takes item added to cart and adds to cart. \n      return [].concat(_toConsumableArray(state), [action.payload]);\n\n    case \"REMOVE\":\n      // if there are multiple of an item in cart, this will remove first index of an item from cart, not all of the item from cart\n      var firstMatchIndex = state.indexOf(action.payload);\n      return state.filter(function (item, index) {\n        return index !== firstMatchIndex;\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/jonellecarless/gwu/starting points/storetest/src/features/cart/reducer.js"],"names":["cartReducer","state","action","type","payload","firstMatchIndex","indexOf","filter","item","index"],"mappings":";;AAAA;AACA,IAAMA,WAAW,GAAG,SAAdA,WAAc,GAAsB;AAAA,MAArBC,KAAqB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAK,KAAL;AACE;AACA;AACA,0CAAUF,KAAV,IAAiBC,MAAM,CAACE,OAAxB;;AAEF,SAAK,QAAL;AACE;AACA,UAAMC,eAAe,GAAGJ,KAAK,CAACK,OAAN,CAAcJ,MAAM,CAACE,OAArB,CAAxB;AACA,aAAOH,KAAK,CAACM,MAAN,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,eAAiBA,KAAK,KAAKJ,eAA3B;AAAA,OAAb,CAAP;;AAEA;AACE,aAAOJ,KAAP;AAbN;AAeD,CAhBD;;AAkBA,eAAeD,WAAf","sourcesContent":["// Code for cart function\nconst cartReducer = (state=[], action) => {\n  switch(action.type) {\n\n    case \"ADD\":\n      // \"...\" is the spread operator which takes the old array and adds everything to a new array. So in this case everything from state gets put into an array.\n      // action.payload takes item added to cart and adds to cart. \n      return[...state, action.payload]\n\n    case \"REMOVE\":\n      // if there are multiple of an item in cart, this will remove first index of an item from cart, not all of the item from cart\n      const firstMatchIndex = state.indexOf(action.payload)\n      return state.filter((item, index) => index !== firstMatchIndex)\n    \n      default:\n        return state;\n    }\n}\n\nexport default cartReducer"]},"metadata":{},"sourceType":"module"}