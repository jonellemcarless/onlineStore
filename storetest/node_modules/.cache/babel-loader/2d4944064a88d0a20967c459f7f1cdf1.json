{"ast":null,"code":"var _jsxFileName = \"/Users/jonellecarless/gwu/starting points/storetest/src/features/product-listing/index.js\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport ProductListItem from \"./product-list-item\";\nimport { cartItemsWithQuantities } from \"../cart\";\n\nfunction ProductListing(props) {\n  return React.createElement(\"div\", {\n    className: \"product-listing\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, props.products.map(function (product) {\n    return React.createElement(ProductListItem, {\n      product: product,\n      addToCart: props.addToCart,\n      cart: cartItemsWithQuantities(props.cart),\n      cartItem: props.cart.filter(function (cartItem) {\n        return cartItem.id === product.id;\n      })[0],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 10\n      },\n      __self: this\n    });\n  }));\n} // Function that grabs values from cart state and maps them to cart\n\n\nfunction mapStateToProps(state) {\n  return {\n    cart: state.cart\n  };\n} // Maps actions to store. This will add and remove items from cart. Dispatch is an action onto store. removeFromCart=action, takes an item. arrow function returns JS object, call dispatch to store with a type of add/remove, paylove = item. type & payload imported from reducer file\n\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    addToCart: function addToCart(item) {\n      dispatch({\n        type: \"ADD\",\n        payload: item\n      });\n    },\n    removeFromCart: function removeFromCart(item) {\n      dispatch({\n        type: \"REMOVE\",\n        payload: item\n      });\n    }\n  };\n} // exports first function and passes it through second function\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductListing);","map":{"version":3,"sources":["/Users/jonellecarless/gwu/starting points/storetest/src/features/product-listing/index.js"],"names":["React","connect","ProductListItem","cartItemsWithQuantities","ProductListing","props","products","map","product","addToCart","cart","filter","cartItem","id","mapStateToProps","state","mapDispatchToProps","dispatch","item","type","payload","removeFromCart"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,qBAA5B;AACA,SAASC,uBAAT,QAAwC,SAAxC;;AAEA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,SAAO;AAAK,IAAA,SAAS,EAAC,iBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAECA,KAAK,CAACC,QAAN,CAAeC,GAAf,CAAoB,UAAAC,OAAO;AAAA,WACvB,oBAAC,eAAD;AACA,MAAA,OAAO,EAAEA,OADT;AAEA,MAAA,SAAS,EAAEH,KAAK,CAACI,SAFjB;AAGA,MAAA,IAAI,EAAEN,uBAAuB,CAACE,KAAK,CAACK,IAAP,CAH7B;AAIA,MAAA,QAAQ,EAAEL,KAAK,CAACK,IAAN,CAAWC,MAAX,CAAkB,UAAAC,QAAQ;AAAA,eAAIA,QAAQ,CAACC,EAAT,KAAgBL,OAAO,CAACK,EAA5B;AAAA,OAA1B,EAA0D,CAA1D,CAJV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADuB;AAAA,GAA3B,CAFD,CAAP;AAYH,C,CAED;;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC5B,SAAO;AACHL,IAAAA,IAAI,EAAEK,KAAK,CAACL;AADT,GAAP;AAGH,C,CAED;;;AACA,SAASM,kBAAT,CAA4BC,QAA5B,EAAsC;AAClC,SAAO;AACHR,IAAAA,SAAS,EAAE,mBAACS,IAAD,EAAU;AACjBD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,OAAO,EAAEF;AAAxB,OAAD,CAAR;AACH,KAHE;AAIHG,IAAAA,cAAc,EAAE,wBAACH,IAAD,EAAU;AACtBD,MAAAA,QAAQ,CAAC;AAAEE,QAAAA,IAAI,EAAE,QAAR;AAAkBC,QAAAA,OAAO,EAAEF;AAA3B,OAAD,CAAR;AACH;AANE,GAAP;AAQH,C,CAED;;;AACA,eAAejB,OAAO,CAACa,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CZ,cAA7C,CAAf","sourcesContent":["import React from \"react\"\nimport { connect } from \"react-redux\"\nimport ProductListItem from \"./product-list-item\"\nimport { cartItemsWithQuantities } from \"../cart\";\n\nfunction ProductListing(props) {\n    return <div className=\"product-listing\">\n        {\n            props.products.map( product =>\n                <ProductListItem \n                product={product}\n                addToCart={props.addToCart}\n                cart={cartItemsWithQuantities(props.cart)}\n                cartItem={props.cart.filter(cartItem => cartItem.id === product.id)[0]}\n                />\n                )\n        }\n    </div>\n}\n\n// Function that grabs values from cart state and maps them to cart\nfunction mapStateToProps(state) {\n    return {\n        cart: state.cart\n    }\n}\n\n// Maps actions to store. This will add and remove items from cart. Dispatch is an action onto store. removeFromCart=action, takes an item. arrow function returns JS object, call dispatch to store with a type of add/remove, paylove = item. type & payload imported from reducer file\nfunction mapDispatchToProps(dispatch) {\n    return {\n        addToCart: (item) => {\n            dispatch({ type: \"ADD\", payload: item})\n        },\n        removeFromCart: (item) => {\n            dispatch({ type: \"REMOVE\", payload: item })\n        }\n    }\n}\n\n// exports first function and passes it through second function\nexport default connect(mapStateToProps, mapDispatchToProps)(ProductListing)"]},"metadata":{},"sourceType":"module"}