{"ast":null,"code":"import _objectSpread from \"/Users/jonellecarless/gwu/starting points/storetest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _toConsumableArray from \"/Users/jonellecarless/gwu/starting points/storetest/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nvar cartWithoutItem = function cartWithoutItem(cart, item) {\n  return cart.filter(function (cartItem) {\n    return cartItem.id !== item.id;\n  });\n};\n\nvar itemInCart = function itemInCart(cart, item) {\n  return cart.filter(function (cartItem) {\n    return cartItem.id !== item.id;\n  })[0];\n};\n\nvar addToCart = function addToCart(cart, item) {\n  var cartItem = itemInCart(cart, item);\n  return cartItem === undefined ? [].concat(_toConsumableArray(cartWithoutItem(cart, item)), [_objectSpread({}, item, {\n    quantity: 1\n  })]) : [].concat(_toConsumableArray(cartWithoutItem(cart, item)), [_objectSpread({}, cartItem, {\n    quantity: cartItem.quantity + 1\n  })]);\n};\n\nvar removeFromCart = function removeFromCart(cart, item) {\n  return item.quantity === 1 ? _toConsumableArray(cartWithoutItem(cart, item)) : _toConsumableArray(cartWithoutItem(cart, item, _objectSpread({}, item, {\n    quantity: item.quantity - 1\n  })));\n}; // cart.filter(cartItem => cartItem.id !== item.id)[0]\n// Code for cart function\n\n\nvar cartReducer = function cartReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case \"ADD\":\n      // \"...\" is the spread operator which takes the old array and adds everything to a new array. So in this case everything from state gets put into an array.\n      // action.payload takes item added to cart and adds to cart. \n      return addToCart(state, action.payload);\n    // [...state, action.payload]\n\n    case \"REMOVE\":\n      // if there are multiple of an item in cart, this will remove first index of an item from cart, not all of the item from cart\n      return removeFromCart(state, action.payload);\n\n    default:\n      return state;\n  }\n};\n\nexport default cartReducer;","map":{"version":3,"sources":["/Users/jonellecarless/gwu/starting points/storetest/src/features/cart/reducer.js"],"names":["cartWithoutItem","cart","item","filter","cartItem","id","itemInCart","addToCart","undefined","quantity","removeFromCart","cartReducer","state","action","type","payload"],"mappings":";;;AAAA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAOC,IAAP;AAAA,SAAgBD,IAAI,CAACE,MAAL,CAAY,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,EAAT,KAAgBH,IAAI,CAACG,EAAzB;AAAA,GAApB,CAAhB;AAAA,CAAxB;;AACA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACL,IAAD,EAAOC,IAAP;AAAA,SAAgBD,IAAI,CAACE,MAAL,CAAY,UAAAC,QAAQ;AAAA,WAAIA,QAAQ,CAACC,EAAT,KAAgBH,IAAI,CAACG,EAAzB;AAAA,GAApB,EAAiD,CAAjD,CAAhB;AAAA,CAAnB;;AAEA,IAAME,SAAS,GAAG,SAAZA,SAAY,CAACN,IAAD,EAAOC,IAAP,EAAgB;AAC9B,MAAME,QAAQ,GAAGE,UAAU,CAACL,IAAD,EAAOC,IAAP,CAA3B;AACF,SAAOE,QAAQ,KAAKI,SAAb,gCACAR,eAAe,CAACC,IAAD,EAAOC,IAAP,CADf,sBACkCA,IADlC;AACwCO,IAAAA,QAAQ,EAAE;AADlD,sCAEAT,eAAe,CAACC,IAAD,EAAOC,IAAP,CAFf,sBAEkCE,QAFlC;AAE4CK,IAAAA,QAAQ,EAAEL,QAAQ,CAACK,QAAT,GAAoB;AAF1E,MAAP;AAGD,CALD;;AAOA,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACT,IAAD,EAAOC,IAAP,EAAgB;AACrC,SAAOA,IAAI,CAACO,QAAL,KAAkB,CAAlB,sBACDT,eAAe,CAACC,IAAD,EAAOC,IAAP,CADd,uBAEDF,eAAe,CAACC,IAAD,EAAOC,IAAP,oBAAkBA,IAAlB;AAAwBO,IAAAA,QAAQ,EAAEP,IAAI,CAACO,QAAL,GAAgB;AAAlD,KAFd,CAAP;AAGD,CAJD,C,CAKE;AAEF;;;AACA,IAAME,WAAW,GAAG,SAAdA,WAAc,GAAsB;AAAA,MAArBC,KAAqB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACxC,UAAOA,MAAM,CAACC,IAAd;AAEE,SAAK,KAAL;AACE;AACA;AACA,aAAOP,SAAS,CAACK,KAAD,EAAQC,MAAM,CAACE,OAAf,CAAhB;AACA;;AAEF,SAAK,QAAL;AACE;AACA,aAAOL,cAAc,CAACE,KAAD,EAAQC,MAAM,CAACE,OAAf,CAArB;;AAEA;AACE,aAAOH,KAAP;AAbN;AAeD,CAhBD;;AAkBA,eAAeD,WAAf","sourcesContent":["const cartWithoutItem = (cart, item) => cart.filter(cartItem => cartItem.id !== item.id)\nconst itemInCart = (cart, item) => cart.filter(cartItem => cartItem.id !== item.id)[0]\n\nconst addToCart = (cart, item) => {\n    const cartItem = itemInCart(cart, item)\n  return cartItem === undefined\n  ? [ ...cartWithoutItem(cart, item), { ...item, quantity: 1 }]\n  : [ ...cartWithoutItem(cart, item), { ...cartItem, quantity: cartItem.quantity + 1}]\n}\n\nconst removeFromCart = (cart, item) => {\n  return item.quantity === 1\n  ? [...cartWithoutItem(cart, item) ]\n  : [...cartWithoutItem(cart, item, { ...item, quantity: item.quantity - 1 })]\n}\n  // cart.filter(cartItem => cartItem.id !== item.id)[0]\n\n// Code for cart function\nconst cartReducer = (state=[], action) => {\n  switch(action.type) {\n\n    case \"ADD\":\n      // \"...\" is the spread operator which takes the old array and adds everything to a new array. So in this case everything from state gets put into an array.\n      // action.payload takes item added to cart and adds to cart. \n      return addToCart(state, action.payload)\n      // [...state, action.payload]\n\n    case \"REMOVE\":\n      // if there are multiple of an item in cart, this will remove first index of an item from cart, not all of the item from cart\n      return removeFromCart(state, action.payload)\n    \n      default:\n        return state;\n    }\n}\n\nexport default cartReducer"]},"metadata":{},"sourceType":"module"}